
        === "String"
            {% include "Basic/src/data types/javascript/string.mds" %} 

        === "Numeric"
            ``` javascript
            // [number_type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type)

            // [numeric_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#numeric_literals)

            // [Global_Objects/Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)

            let decimal =  123456789123456789;       // (decimal, base 10)
            let octal   =  0o777777777777;           // (octal, base 8)
            let hex     =  0x123456789ABCDEF;        // (hexadecimal, "hex" or base 16)
            let binary  =  0b11101001010101010101;   // (binary, base 2)

            for(i of [decimal,octal,hex,binary]){
                console.log(i);
            }
            ```

        === "Boolean"
            ``` javascript
            // [boolean_type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type)

            // [Global_Objects/Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)

            let x = new Boolean(false);
            if (x) {
                // Any object of which the value is not undefined or null, including a Boolean object whose value is false,
                // evaluates to true when passed to a conditional statement.
                console.log(x);
                console.log("this code is executed");
            }

            let y = false;
            console.log(y);
            if (y) {
                console.log("this code is not executed");
            }

            let values = [
                new Boolean(false),
                new Boolean(""),
                new Boolean(null),
                new Boolean(NaN),
                new Boolean(0),
                new Boolean(-0),
                new Boolean(undefined),
                new Boolean(-1),
                new Boolean([]),
                new Boolean('false')
            ];
            for(i of values){
                console.log(i);
            }
            ```

        === "Array"
            ``` javascript
            // [array_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals)

            // [Global_Objects/Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)

            let coffees = ['French Roast', 'Colombian', 'Kona'];
            for(i of coffees){
                console.log(i);
            }
            // fish[1] is undefined
            let fish = ['Lion', , 'Angel'];
            for(i of fish){
                console.log(i);
            }
            // Only the last comma is ignored
            let list = ['home', , 'school', , ];
            for(i of list){
                console.log(i);
            }
            ```

        === "Object"
            ``` javascript
            // [objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects)

            // [object_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals)

            // [Global_Objects/Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)

            let car = { mode: "", name: "", brand:""}
            console.log(car);

            // Functional Object
            let Person = function(name) {
                this.name = name;
                this.canTalk = true;
            };

            Person.prototype.greet = function() {
                if (this.canTalk) {
                    console.log('Hi, I am ' + this.name);
                }
            };
            let mike = new Person('Mike');
            mike.greet();

            ```

        === "NULL"
            ``` javascript
            // [null_type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type)

            // [Global_Objects/null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)

            console.log(typeof null === 'object');
            ```
        
        === "Float"
            ``` javascript
            // [floating-point_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#floating-point_literals)
            ```