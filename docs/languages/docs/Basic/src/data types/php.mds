        
        === "String"
            {% include "Basic/src/data types/php/string.mds" %}    

        === "Numeric"
            ``` php
            <?php
                // [integer](https://www.php.net/manual/en/language.types.integer.php)

                $decimal =  123456789123456789;       // (decimal, base 10)
                $octal   =  0777777777777;           // (octal, base 8)
                $hex     =  0x123456789ABCDEF;        // (hexadecimal, "hex" or base 16)
                $binary =  0b11101001010101010101;   // (binary, base 2)

                foreach([$decimal,$octal, $hex, $binary] as $value){
                    echo $value.PHP_EOL;
                }
            ```         

        === "Boolean"
            ``` php
            <?php
                // [boolean](https://www.php.net/manual/en/language.types.boolean.php)
                var_dump((bool) "");        // bool(false)
                var_dump((bool) 1);         // bool(true)
                var_dump((bool) -2);        // bool(true)
                var_dump((bool) "foo");     // bool(true)
                var_dump((bool) 2.3e5);     // bool(true)
                var_dump((bool) array(12)); // bool(true)
                var_dump((bool) array());   // bool(false)
                var_dump((bool) "false");   // bool(true)
                var_dump((bool) -1);        // bool(true)
            ``` 

            !!! warning
                -1 is considered true, like any other non-zero (whether negative or positive) number!

        ===  "Array"
            {% include "Basic/src/data types/php/array.mds" %} 

        ===  "Object"
            {% include "Basic/src/data types/php/object.mds" %} 

        ===  "NULL"
            ``` php
            <?php
                // [null](https://www.php.net/manual/en/language.types.null.php)
                $var = NULL;   
                var_dump($var);
                var_dump(is_null($var));
                var_dump(null == 0);
                var_dump(null === 0);
            ```

        ===  "Float"
            ``` php
            <?php
                // [float](https://www.php.net/manual/en/language.types.float.php)
                $a = 1.234; 
                $b = 1.2e3; 
                $c = 7E-10;
                $d = 1_234.567; // as of PHP 7.4.0
                echo $a.PHP_EOL;
                echo $b.PHP_EOL;
                echo $c.PHP_EOL;
                echo $d.PHP_EOL;

                // check precision
                $a = 1.23456789;
                $b = 1.23456780;
                $epsilon = 0.00001;

                if(abs($a-$b) < $epsilon) {
                    echo "true".PHP_EOL;
                }

                $x = 8 - 6.4;  // which is equal to 1.6 which is not really 1.6, but 1.599999.. and var_dump shows it to you as being 1.6
                $y = 1.6;
                var_dump(round($x, 2) == round($y, 2)); // this is true
                var_dump($x == $y); // is not true
                
            ```
                
        ===  "Resource"
            ```
            // [resources](https://www.php.net/manual/en/resource.php)
            ```

        === "Iterable"
            ``` php
            <?php
                // [iterable](https://www.php.net/manual/en/language.types.iterable.php)
                function bar(): iterable {
                    return [1, 2, 3];
                }

                foreach(bar() as $value){
                    echo $value.PHP_EOL;
                }

                function gen(): iterable {
                    yield 1;
                    yield 2;
                    yield 3;
                }

                foreach(gen() as $value){
                    echo $value.PHP_EOL;
                }
            ```

        ===  "Callback / Callable"
            ``` php
                <?php
                    // [callable](https://www.php.net/manual/en/language.types.callable.php)
                    // An example callback function
                    function my_callback_function($message="world") {
                        echo "hello $message!".PHP_EOL;
                    }

                    // An example callback method
                    class MyClass {
                        static function myCallbackMethod() {
                            echo 'Hello World!'.PHP_EOL;
                        }
                    }

                    // Type 1: Simple callback and pass variable
                    call_user_func('my_callback_function', "PHP");

                    // Type 2: Static class method call
                    call_user_func(array('MyClass', 'myCallbackMethod'));

                    // Type 3: Object method call
                    $obj = new MyClass();
                    call_user_func(array($obj, 'myCallbackMethod'));

                    // Type 4: Static class method call
                    call_user_func('MyClass::myCallbackMethod');

                    // Type 5: Relative static class method call
                    class A {
                        public static function who() {
                            echo "A\n";
                        }
                    }

                    class B extends A {
                        public static function who() {
                            echo "B\n";
                        }
                    }

                    call_user_func(array('B', 'parent::who')); // A

                    // Type 6: Objects implementing __invoke can be used as callables
                    class C {
                        public function __invoke($name) {
                            echo 'Hello ', $name, "\n";
                        }
                    }

                    $c = new C();
                    call_user_func($c, 'PHP!');
            ```
