
            === "Class"
                ``` java
                import java.lang.reflect.Constructor;
                import java.lang.reflect.Field;
                import java.lang.reflect.InvocationTargetException;
                import java.lang.reflect.Method;

                class Customer {
                    private String account;
                    private String password;
                    public int age;

                    public Customer(String account, String password) {
                        this.account = account;
                        this.password = password;
                    }

                    public void display() {
                        System.out.println(this.account);
                        System.out.println(this.password);
                        System.out.println(this.age);
                    }

                    public String getAccount() {
                        return this.account;
                    }

                    public void setAccount(String str) {
                        this.account = str;
                    }

                    public String getPassword() {
                        return password;
                    }

                    public void setPassword(String password) {
                        this.password = password;
                    }
                }

                public class Ref {
                    public static void main(String[] args) {
                        try {
                            Class<?> cn = Class.forName("Customer");
                            Field[] fields = cn.getDeclaredFields();
                            for (Field f : fields) {
                                System.out.println(f.getType() + " => " + f.getName());
                            }
                            Field account = cn.getDeclaredField("account");
                            System.out.println(account.getType() + " => " + cn.getName());

                            Constructor<?>[] constructors = cn.getDeclaredConstructors();
                            for (Constructor<?> cons : constructors) {
                                Class<?>[] types = cons.getParameterTypes();
                                for (Class<?> cls : types) {
                                    System.out.println(cls + "\t" + cls.getName());
                                }
                                System.out.println();
                            }

                            Constructor<?> constructor = cn.getDeclaredConstructor(String.class, String.class);
                            System.out.println(constructor.getModifiers());

                            Method[] methods = cn.getDeclaredMethods();
                            for (Method method : methods) {
                                System.out.println(method.getName() + " => " + method.getReturnType());
                                Class<?>[] types = method.getParameterTypes();
                                for (Class<?> cls : types) {
                                    System.out.println(cls + "\t");
                                }
                                System.out.println();
                            }

                            Class<?> customer = Class.forName("Customer");
                            Constructor<?> constructor1 = customer.getDeclaredConstructor(String.class, String.class);
                            Object o = constructor1.newInstance("111", "111");
                            Field rAccount = customer.getDeclaredField("age");
                            rAccount.set(o, 18);
                            Method display = customer.getMethod("display");
                            display.invoke(o);

                            /*
                            Customer cus = (Customer) o;
                            cus.display();
                            */

                        } catch (ClassNotFoundException | NoSuchFieldException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                            e.printStackTrace();
                        }
                    }
                }
 
                ```