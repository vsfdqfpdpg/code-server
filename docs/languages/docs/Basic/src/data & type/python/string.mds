
            === "Char"
                ``` python
                ## [unicode](https://docs.python.org/3/howto/unicode.html)

                import sys
                print(sys.getdefaultencoding())
                print(sys.maxunicode)

                decimal = 65
                octal = 0o101
                hexadecimal = 0x41
                binary = 0b1000001

                ## [chr](https://docs.python.org/3/library/functions.html#chr)
                # Generate a single-byte string from a number
                for i in [decimal,octal, hexadecimal, binary]:
                    print(chr(i))
            
                ## [ord](https://docs.python.org/3/library/functions.html#ord)
                # Convert the first byte of a string to a value between 0 and 1,114,111 (0x10FFFF)
                print(ord('A'))

                # Building a UTF-8 string from individual bytes
                ## [bytes](https://docs.python.org/3/library/functions.html#func-bytes)

                str = bytes([240, 159, 144, 152])
                print(str.decode())

                print(chr(128024))

                # Default encoding
                str = "🐘"
                for pos,byte in enumerate(str):
                    print(f'Byte {pos} of {str} has value => {ord(byte)}')

                # Examining the individual bytes of a UTF-8 string
                str = "🐘".encode("utf-8")
                for pos,byte in enumerate(str):
                    print(f'Byte {pos} of {str.decode("utf-8")} has value => {byte}')

                
                # A chinese character 
                print(len('中'))

                chinese_character = '中'
                for pos, byte in enumerate(chinese_character):
                    ## [bin](https://docs.python.org/3/library/functions.html#bin)
                    # Convert Decimal to Binary Using bin(), format
                    decimal = ord(byte)
                    print(f'Byte {pos} of {chinese_character} has value {decimal} => {decimal:b}')

                
                u16 = "🐘".encode("utf-16");
                print(len(u16))
                for pos, byte in enumerate(u16):
                    print(f'Byte {pos} of 🐘 has value {byte} => {byte:b}')

                print(u16.decode('utf-16'))

                
                ```

            === "String"
                ```python
                ## [lexical string](https://docs.python.org/3/reference/lexical_analysis.html#strings)

                ## [Formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)

                ## [Format String Syntax](https://docs.python.org/3/library/string.html#formatstrings)

                ## [printf-style String Formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting)

                ## [Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)

                ## [String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods)

                ## [strings](https://docs.python.org/3/tutorial/introduction.html#strings)

                print('allows embedded "double" quotes')
                print("allows embedded 'single' quotes")
                print('''Three single quotes''')
                print("""Three double quotes""")
                # String literals that are part of a single expression and have only whitespace between them
                # will be implicitly converted to a single string literal.
                print("spam " "eggs")
                print('"Isn\'t," they said.')
                print('C:\some\name')
                # If you don’t want characters prefaced by \ to be interpreted as special characters, 
                # you can use raw strings by adding an r before the first quote
                print(r'C:\some\name')

                print("""\
                Usage: thingy [OPTIONS]
                    -h                        Display this usage message
                    -H hostname               Hostname to connect to
                """)
                ```