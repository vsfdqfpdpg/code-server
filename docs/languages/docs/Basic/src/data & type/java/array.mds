
            === "List"
                ``` java
                import java.util.ArrayList;

                public class List{
                    public static void main(String[] args){
                        // 一般情况下，如果要支持随机访问，而不必在除末尾以外的任何位置插入或去除元素，使用ArrayList较好
                        //  如果要频繁的从集合中间位置添加或去除元素，用LinkedList实现更好
                        // 如果要实现线程安全，用Vector更好
                        
                        ArrayList<String> sl = new ArrayList<>();
                        // 在末尾添加一个对象
                        sl.add("中国");
                        sl.add("美国");
                        sl.add("日本");
                        sl.add("韩国");
                        // 移除某个位置的对象
                        sl.remove(1);
                        // 修改某个位置上的对象
                        sl.set(0, "China");
                        // 判断是否包含某个对象
                        System.out.println("sl is contains 'China' => " +sl.contains("China"));
                        // 返回某个对象的位置
                        System.out.println("The position of 'China' in sl is => " + sl.indexOf("China"));
                        // 移除某个对象
                        sl.remove("China");
                        // 将ArrayList转换为对象数组
                        for(Object str: sl.toArray()){
                            System.out.println(str);
                        }
                        // 返回集合大小
                        int size = sl.size();

                        for(int i = 0; i< size; i++){
                            // 得到某个位置的对象
                            System.out.println(sl.get(i));
                        }
                        // 对象最后一次出现的位置
                        System.out.println("The last position of '韩国' in sl is => " + sl.lastIndexOf("韩国"));
                        // 清空集合
                        sl.clear();
                        System.out.println("sl is empty => " + sl.isEmpty());

                    }
                }
                ```

            === "Set"
                ``` java
                import java.util.HashSet;
                import java.util.Iterator;

                public class SetTest{
                    public static void main(String[] args){
                        HashSet<String> hs = new HashSet<>();
                        hs.add("中国");
                        hs.add("美国");
                        hs.add("日本");
                        hs.add("韩国");
                        hs.remove("美国");

                        Iterator<String> it = hs.iterator();
                        while(it.hasNext()){
                            System.out.println(it.next());
                        }
                    }
                }
                ```

                ``` java
                import java.util.TreeSet;
                import java.util.Collections;
                import java.util.Iterator;

                public class SetTest{
                    public static void main(String[] args){
                        TreeSet<String> ts = new TreeSet<>(Collections.reverseOrder());
                        ts.add("4");
                        ts.add("2");
                        ts.add("1");
                        ts.add("3");

                        Iterator<String> it = ts.iterator();
                        while(it.hasNext()){
                            System.out.println(it.next());
                        }

                    }
                }
                ```

                ``` java
                import java.util.Collections;
                import java.util.ArrayList;

                public class SetTest{
                    public static void main(String[] args){
                        ArrayList<String> al = new ArrayList<>();
                        al.add("4");
                        al.add("2");
                        al.add("1");
                        al.add("3");

                        Collections.sort(al);
                        for(String str : al){
                            System.out.println(str);
                        }

                        System.out.println("--------------------");

                        Collections.sort(al, Collections.reverseOrder());
                        for(String str : al){
                            System.out.println(str);
                        }

                        System.out.println("The '1' appears in al " + Collections.frequency(al,"1") + " times.");

                        System.out.println("The max value in al is " + Collections.max(al));
                        System.out.println("The minimal value in al is " + Collections.min(al));

                        ArrayList<String> al2 = new ArrayList<>();
                        al2.add("中国");
                        // 判断2个集合是否有相同的元素，有则返回假，没有则返回真
                        System.out.println("al is as same as al2 =>  " + Collections.disjoint(al,al2));
                    }
                }
                ```

            === "HashMap"
                ``` java
                import java.util.HashMap;
                import java.util.Set;

                public class MapTest{
                    public static void main(String[] args){
                        HashMap<String, Object> hm = new HashMap<>();
                        // 添加一个对象并指定key
                        hm.put("姓名", "张三");
                        hm.put("年龄", 25);
                        hm.put("性别", "男");

                        // 通过key获取一个元素的值
                        System.out.println("姓名为: " + hm.get("姓名"));
                        // 通过key来修改一个元素的值
                        hm.put("姓名", "王武");
                        System.out.println("修改后的姓名为: " + hm.get("姓名"));

                        // 通过key来删除元素
                        hm.remove("姓名");
                        System.out.println("删除后的姓名为: " + hm.get("姓名"));
                        //  通过keySet来获取key值的集合
                        for(Object key : hm.keySet()){
                            System.out.println(key + " => " + hm.get(key) );
                        }
                        // 判断是否包含某个对象
                        System.out.println("HashMap 是否存在值 '30' => " + hm.containsValue("30"));
                        // 判断是否包含某个key值
                        System.out.println("HashMap 是否存在键 '年龄' => " + hm.containsKey("年龄"));
                        // 得到Hashmap的大小
                        System.out.println("HashMap 的长度是 => " + hm.size());
                        // 清空HashMap
                        hm.clear();
                        // 判断Hashmap 是否为空
                        System.out.println("HashMap is empty => " + hm.isEmpty());
                    }
                }
                ```